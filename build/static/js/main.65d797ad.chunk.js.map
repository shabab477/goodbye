{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["momentDurationFormatSetup","moment","App","sizeMe","monitorHeight","monitorWidth","_Component","ConfettiComponent","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","timerUpCallback","setState","timerUp","state","inherits","createClass","key","value","children","react_default","a","createElement","react_confetti_default","assign","size","className","href","target","App_TimerComponent","style","position","top","left","width","height","map","component","Component","TimerComponent","_this2","componentDidMount","diff","started","paused","countdown","doomsDay","set","h","duration","asMilliseconds","console","log","_this3","_this$state","index_es","timeStart","interval","formatTimer","time","ms","format","onComplete","objectSpread","info","concat","JSON","stringify","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.65d797ad.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport './App.css'\nimport TimerMachine from \"react-timer-machine\"\n\nimport moment from \"moment\"\nimport momentDurationFormatSetup from \"moment-duration-format\"\nimport sizeMe from 'react-sizeme'\nimport Confetti from 'react-confetti'\nimport PropTypes from 'prop-types'\n\nmomentDurationFormatSetup(moment)\n\nconst App = sizeMe({\n  monitorHeight: true,\n  monitorWidth: true,\n})(class ConfettiComponent extends Component {\n  static propTypes = {\n    size: PropTypes.shape({\n      width: PropTypes.number,\n      height: PropTypes.number,\n    }),\n  }\n\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      timerUp: false\n    }\n  }\n\n  timerUpCallback = () => {\n    this.setState({\n      timerUp: true\n    })\n  }\n\n  render() {\n    var children = []\n    if (this.state.timerUp) {\n      children = [\n        <Confetti {...this.props.size} key='2'/>,\n        <section className=\"timerMachine\" key='3'>\n          <h1>\n            Just a note to say..<br />\n            As you move into a new venture...<br />\n            May luck and success always be with you!<br />\n          </h1>\n          <h6>For more heartfelt farewell messages like this, <a href=\"https://www.dgreetings.com/atwork_cards/farewell/messages.html\" target=\"_\">Click here</a></h6>\n        </section>\n      ]\n    } else {\n      children = [\n        <TimerComponent key='1' timerUpCallback={this.timerUpCallback}/>\n      ]\n    }\n\n    return (\n      <div style={{ position: 'absolute', top: 0, left: 0, width: '100%', height: '100%' }}>\n        {children.map(component => component)}\n      </div>\n    )\n  }\n})\n\nclass TimerComponent extends Component {\n\n  constructor(props) {\n    super(props)\n    \n    var doomsDay = moment('2019-02-27')\n    doomsDay.set({\n      h: 17,\n    })\n\n    var diff = moment.duration(doomsDay.diff(moment())).asMilliseconds()\n    console.log(diff)\n\n    this.state = {\n      paused: false,\n      started: false,\n      countdown: true,\n      diff: diff < 0? 0 : diff\n    }\n  }\n\n  componentDidMount = () => {\n    if (this.state.diff <= 0) {\n      this.props.timerUpCallback()\n    }\n\n    this.setState({\n      started: this.state.diff > 0,\n      paused: this.state.diff < 0,\n      countdown: true,\n      diff: this.state.diff < 0? 0 : this.state.diff\n    })\n  }\n\n  render() {\n    \n    const { started, paused, countdown, diff } = this.state\n\n    return (\n      <section className=\"timerMachine\">\n        \n        <h1>Time till Ashzabin <a target=\"_\" href=\"https://en.wikipedia.org/wiki/Apu_Nahasapeemapetilon\">Apu</a> will be no longer with us</h1>\n        \n        <span className=\"timer\">\n          <TimerMachine\n            timeStart={diff}\n            started={started}\n            paused={paused}\n            countdown={countdown}\n            interval={1000}\n            formatTimer={(time, ms) =>\n              moment.duration(ms, \"milliseconds\").format(\"h:mm:ss\")\n            }\n            onComplete={time =>{\n                if (this.state.diff > 0) {\n                  this.setState({...this.state, diff: 0, started: false})\n                }\n                this.props.timerUpCallback()\n                console.info(`Timer completed: ${JSON.stringify(time)}`)\n              }\n            }\n          />\n        </span>\n      </section>\n    )\n  }\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}